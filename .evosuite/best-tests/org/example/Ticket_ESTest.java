/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 22:20:53 GMT 2023
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.Flight;
import org.example.Ticket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ticket_ESTest extends Ticket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Flight flight0 = new Flight(549);
      flight0.updateCapacity((-1470570040), "economy");
      Ticket ticket0 = new Ticket(549, 549, flight0, "economy", "nonrefundable");
      ticket0.calculateCost(549);
      assertEquals(549, ticket0.getId());
      assertEquals(0.0, ticket0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Flight flight0 = new Flight(969);
      Ticket ticket0 = null;
      try {
        ticket0 = new Ticket(969, (-1470569971), flight0, "economy", "nonrefundable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ticket ticket0 = null;
      try {
        ticket0 = new Ticket(0, 1999, (Flight) null, "business", "refundable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Flight flight0 = new Flight((-2059));
      Ticket ticket0 = null;
      try {
        ticket0 = new Ticket((-3378), 0, flight0, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Flight flight0 = new Flight(956);
      flight0.updateCapacity((-1470570021), "economy");
      Ticket ticket0 = new Ticket(956, 1, flight0, "economy", "nonrefundable");
      // Undeclared exception!
      try { 
        ticket0.cancel();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Flight flight0 = new Flight(956);
      flight0.updateCapacity((-1470570021), "economy");
      Ticket ticket0 = new Ticket(956, 956, flight0, "economy", "refundable");
      boolean boolean0 = ticket0.cancel();
      assertEquals(956, ticket0.getId());
      assertEquals(0.0, ticket0.getPrice(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Flight flight0 = new Flight(549);
      flight0.updateCapacity((-1470570021), "economy");
      Ticket ticket0 = new Ticket(549, 1, flight0, "economy", "nonrefundable");
      // Undeclared exception!
      try { 
        ticket0.calculateCost((-1948.30153186));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Flight flight0 = new Flight(956);
      flight0.updateCapacity((-1470570021), "economy");
      Ticket ticket0 = new Ticket(956, 956, flight0, "economy", "refundable");
      ticket0.calculateCost(0.0);
      assertEquals(0.0, ticket0.getPrice(), 0.01);
      assertEquals(956, ticket0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Flight flight0 = new Flight(549);
      Ticket ticket0 = null;
      try {
        ticket0 = new Ticket(549, 0, flight0, "economy", "nonrefundable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ticket ticket0 = null;
      try {
        ticket0 = new Ticket((-1147101393), (-1147101393), (Flight) null, "business", "refundable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Flight flight0 = new Flight(956);
      Ticket ticket0 = null;
      try {
        ticket0 = new Ticket(956, 1, flight0, "economy", "nnef*ndale");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Flight flight0 = new Flight((-1470570021));
      Ticket ticket0 = null;
      try {
        ticket0 = new Ticket((-1470570021), (-1470570021), flight0, "busJnesx", "busJnesx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Flight flight0 = new Flight(956);
      flight0.updateCapacity((-1470570021), "economy");
      Ticket ticket0 = new Ticket(956, 1, flight0, "economy", "nonrefundable");
      String string0 = ticket0.toString();
      assertEquals("956 956  1   0 0000 0 0000economy nonrefundable 0.0\n", string0);
      assertEquals(0.0, ticket0.getPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Flight flight0 = new Flight(956);
      flight0.updateCapacity((-1470570021), "economy");
      Ticket ticket0 = new Ticket(956, 1, flight0, "economy", "nonrefundable");
      int int0 = ticket0.getId();
      assertEquals(0.0, ticket0.getPrice(), 0.01);
      assertEquals(956, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Flight flight0 = new Flight(956);
      flight0.updateCapacity((-1470570021), "economy");
      Ticket ticket0 = new Ticket(956, 1, flight0, "economy", "nonrefundable");
      double double0 = ticket0.getPrice();
      assertEquals(0.0, double0, 0.01);
      assertEquals(956, ticket0.getId());
  }
}
