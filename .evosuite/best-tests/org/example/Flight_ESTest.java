/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 22:21:31 GMT 2023
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.Flight;
import org.example.Time;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Flight_ESTest extends Flight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Flight flight0 = new Flight(0);
      flight0.updateCapacity(0, "economy");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Flight flight0 = new Flight((-936));
      flight0.applyCostRangeFilter((-936), 0.0, true, true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Flight flight0 = new Flight((-1283));
      flight0.applyCostRangeFilter(0.0, (-1.0), true, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Flight flight0 = new Flight(8);
      flight0.applyCostRangeFilter(0.0, (-834.891), true, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Flight flight0 = new Flight(0);
      flight0.applyCostRangeFilter((-1), 0, false, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Flight flight0 = new Flight(0);
      Time time0 = new Time(0, 0);
      Time time1 = new Time();
      flight0.applyTimeSpanFilter(0, time0, time1);
      assertEquals(0, time0.getMin());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Flight flight0 = new Flight((-3));
      Time time0 = new Time((-1), (-1943));
      flight0.applyTimeSpanFilter((-1558), time0, time0);
      assertEquals((-1943), time0.getMin());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Flight flight0 = new Flight(4);
      double double0 = flight0.calculateCost(4, "business");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Flight flight0 = new Flight(0);
      flight0.updateCapacity((-991), "[U3Xu9^J=!,s");
      String string0 = flight0.toString(true);
      assertEquals("0    0 0000 0 0000 991 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Flight flight0 = new Flight(1893);
      // Undeclared exception!
      try { 
        flight0.updateCapacity(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Flight flight0 = new Flight(1);
      // Undeclared exception!
      try { 
        flight0.read("$7,?^Bk#,6,R{&J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"R{&J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Flight flight0 = new Flight(0);
      // Undeclared exception!
      try { 
        flight0.read((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Flight", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Flight flight0 = new Flight(10);
      // Undeclared exception!
      try { 
        flight0.calculateCost((-1064), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Flight flight0 = new Flight(1345);
      // Undeclared exception!
      try { 
        flight0.applyTimeSpanFilter(0, (Time) null, (Time) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Flight", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Flight flight0 = new Flight(2615);
      Time time0 = new Time();
      flight0.applyTimeSpanFilter(2615, time0, time0);
      String string0 = flight0.toString(false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Flight flight0 = new Flight(779);
      flight0.applyAirlineFilter("9400");
      String string0 = flight0.toString(false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Flight flight0 = new Flight(0);
      // Undeclared exception!
      try { 
        flight0.updateCapacity(4445, "economy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Flight", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Flight flight0 = new Flight(0);
      flight0.applyCostRangeFilter(234.7545289, 234.7545289, true, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Flight flight0 = new Flight((-1445));
      flight0.applyCostRangeFilter((-1.0), 509.3588150208, true, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Flight flight0 = new Flight(0);
      flight0.applyCostRangeFilter((-344.0216512563076), 1.0, true, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Flight flight0 = new Flight(779);
      flight0.applyCostRangeFilter(94, 94, false, false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Flight flight0 = new Flight(0);
      flight0.applyCostRangeFilter(0, (-2375.39667823197), false, false);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Flight flight0 = new Flight((-3213));
      Time time0 = new Time((-3213), (-3213));
      flight0.applyTimeSpanFilter(0, time0, time0);
      assertEquals((-3213), time0.getMin());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Flight flight0 = new Flight(779);
      Time time0 = new Time(94, 0);
      flight0.applyTimeSpanFilter(0, time0, time0);
      assertEquals(94, time0.getHour());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Flight flight0 = new Flight(2615);
      flight0.applyOriginDestinationFilter("", "xDBMU:R:gl'");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Flight flight0 = new Flight(0);
      flight0.applyOriginDestinationFilter("", "");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Flight flight0 = new Flight(2141763995);
      flight0.applyOriginDestinationFilter("I%Nyow", "I%Nyow");
      String string0 = flight0.toString(false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Flight flight0 = new Flight((-2225));
      flight0.updateCapacity((-1952), "economy");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Flight flight0 = new Flight(2141763995);
      // Undeclared exception!
      try { 
        flight0.updateCapacity(2141763995, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Flight", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Flight flight0 = new Flight(0);
      double double0 = flight0.calculateCost(0, "economy");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Flight flight0 = new Flight(779);
      // Undeclared exception!
      try { 
        flight0.calculateCost(7, "t|Op2R{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Bad Request
         //
         verifyException("org.example.Flight", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Flight flight0 = new Flight(0);
      flight0.applyCostRangeFilter(234.7545289, 0, true, false);
      String string0 = flight0.toString(false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Flight flight0 = new Flight(0);
      String string0 = flight0.toString(false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Flight flight0 = new Flight(0);
      flight0.deleteFilters();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Flight flight0 = new Flight(0);
      String string0 = flight0.printForTicket(0);
      assertEquals("0  0   0 0000 0 0000", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Flight flight0 = new Flight((-3));
      // Undeclared exception!
      try { 
        flight0.read("3',^lk0(,1v>");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.example.Flight", e);
      }
  }
}
