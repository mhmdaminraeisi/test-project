/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 22:24:08 GMT 2023
 */

package org.example.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.example.Flight;
import org.example.Time;
import org.example.filter.AirlineFilter;
import org.example.filter.Input;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AirlineFilter_ESTest extends AirlineFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AirlineFilter airlineFilter0 = new AirlineFilter();
      // Undeclared exception!
      try { 
        airlineFilter0.read((Input) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.filter.AirlineFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AirlineFilter airlineFilter0 = new AirlineFilter();
      Time time0 = new Time();
      Input input0 = new Input("org.example.filter.Input", "m7}JM~$oyIc", "m7}JM~$oyIc", 1.0, 1.0, true, true, 0, time0, time0, true, false);
      airlineFilter0.read(input0);
      LinkedList<Flight> linkedList0 = new LinkedList<Flight>();
      Flight flight0 = new Flight(0);
      List<Flight> list0 = linkedList0.subList(0, 0);
      linkedList0.add(flight0);
      // Undeclared exception!
      try { 
        airlineFilter0.apply(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AirlineFilter airlineFilter0 = new AirlineFilter();
      // Undeclared exception!
      try { 
        airlineFilter0.apply((List<Flight>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AirlineFilter airlineFilter0 = new AirlineFilter();
      Time time0 = new Time();
      Input input0 = new Input("org.example.filter.Input", "m7}JM~$oyIc", "m7}JM~$oyIc", 1.0, 1.0, true, true, 0, time0, time0, true, false);
      airlineFilter0.read(input0);
      LinkedList<Flight> linkedList0 = new LinkedList<Flight>();
      Flight flight0 = new Flight(0);
      linkedList0.add(flight0);
      boolean boolean0 = airlineFilter0.apply(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AirlineFilter airlineFilter0 = new AirlineFilter();
      Input input0 = mock(Input.class, new ViolatedAssumptionAnswer());
      doReturn("").when(input0).getAirline();
      airlineFilter0.read(input0);
      boolean boolean0 = airlineFilter0.apply((List<Flight>) null);
      assertFalse(boolean0);
  }
}
