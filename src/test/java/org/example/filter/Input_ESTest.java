/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 22:24:33 GMT 2023
 */

package org.example.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.Time;
import org.example.filter.Input;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Input_ESTest extends Input_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Input input0 = new Input("", "", "", 0.0, (-1113.9580874083), true, true, 10, (Time) null, (Time) null, true, true);
      boolean boolean0 = input0.isMinTimeEntered();
      assertTrue(input0.isMaxPriceEntered());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertEquals(10, input0.getDepartureDate());
      assertTrue(input0.isMinPriceEntered());
      assertTrue(input0.isMaxTimeEntered());
      assertTrue(boolean0);
      assertEquals((-1113.9580874083), input0.getMaxPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Time time0 = new Time((-594), 1);
      Input input0 = new Input("", "", "", (-1.0), 0.0, false, true, 0, time0, time0, true, true);
      boolean boolean0 = input0.isMinPriceEntered();
      assertEquals(0, input0.getDepartureDate());
      assertEquals(0.0, input0.getMaxPrice(), 0.01);
      assertTrue(input0.isMaxPriceEntered());
      assertTrue(input0.isMinTimeEntered());
      assertTrue(input0.isMaxTimeEntered());
      assertFalse(boolean0);
      assertEquals((-1.0), input0.getMinPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Time time0 = new Time(0, 0);
      Input input0 = new Input("", "org.example.filter.Input", "org.example.filter.Input", 28.411752, 28.411752, true, true, 0, time0, time0, true, true);
      boolean boolean0 = input0.isMaxTimeEntered();
      assertTrue(input0.isMinPriceEntered());
      assertTrue(boolean0);
      assertEquals(28.411752, input0.getMaxPrice(), 0.01);
      assertEquals("", input0.getAirline());
      assertTrue(input0.isMinTimeEntered());
      assertTrue(input0.isMaxPriceEntered());
      assertEquals("org.example.filter.Input", input0.getDestination());
      assertEquals(0, input0.getDepartureDate());
      assertEquals(28.411752, input0.getMinPrice(), 0.01);
      assertEquals("org.example.filter.Input", input0.getOrigin());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Input input0 = new Input("", "", "", 0.0, (-1113.9580874083), true, true, 10, (Time) null, (Time) null, true, true);
      boolean boolean0 = input0.isMaxPriceEntered();
      assertEquals(10, input0.getDepartureDate());
      assertEquals((-1113.9580874083), input0.getMaxPrice(), 0.01);
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertTrue(input0.isMinTimeEntered());
      assertTrue(input0.isMinPriceEntered());
      assertTrue(boolean0);
      assertTrue(input0.isMaxTimeEntered());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Input input0 = new Input("x=4zW8", "4F:", "4F:", 0.0, 0.0, true, false, 3554, (Time) null, (Time) null, false, false);
      assertEquals("4F:", input0.getOrigin());
      
      input0.setOrigin((String) null);
      input0.getOrigin();
      assertEquals(3554, input0.getDepartureDate());
      assertTrue(input0.isMinPriceEntered());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals(0.0, input0.getMaxPrice(), 0.01);
      assertFalse(input0.isMinTimeEntered());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMaxTimeEntered());
      assertEquals("4F:", input0.getDestination());
      assertEquals("x=4zW8", input0.getAirline());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Input input0 = new Input("", (String) null, (String) null, (-173.9), 1.0, true, true, (-2581), (Time) null, (Time) null, false, false);
      input0.setOrigin("");
      input0.getOrigin();
      assertEquals((-173.9), input0.getMinPrice(), 0.01);
      assertEquals(1.0, input0.getMaxPrice(), 0.01);
      assertTrue(input0.isMaxPriceEntered());
      assertFalse(input0.isMaxTimeEntered());
      assertEquals((-2581), input0.getDepartureDate());
      assertTrue(input0.isMinPriceEntered());
      assertFalse(input0.isMinTimeEntered());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Input input0 = new Input("", "", "", 1.0, (-1.0), true, true, (-2512), (Time) null, (Time) null, true, false);
      input0.getMinTime();
      assertTrue(input0.isMaxPriceEntered());
      assertEquals((-1.0), input0.getMaxPrice(), 0.01);
      assertTrue(input0.isMinTimeEntered());
      assertFalse(input0.isMaxTimeEntered());
      assertEquals((-2512), input0.getDepartureDate());
      assertTrue(input0.isMinPriceEntered());
      assertEquals(1.0, input0.getMinPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Time time0 = new Time(6549, 10);
      Input input0 = new Input(":99?", ":99?", ":99?", (-4682.3), (-4682.3), true, true, 1320, time0, time0, true, true);
      input0.getMinTime();
      assertTrue(input0.isMinPriceEntered());
      assertEquals(1320, input0.getDepartureDate());
      assertTrue(input0.isMinTimeEntered());
      assertEquals((-4682.3), input0.getMaxPrice(), 0.01);
      assertTrue(input0.isMaxPriceEntered());
      assertTrue(input0.isMaxTimeEntered());
      assertEquals((-4682.3), input0.getMinPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Time time0 = new Time((-331), (-2333));
      Input input0 = new Input(":", "/W^", "", 0.0, 0.0, true, true, (-331), time0, time0, false, false);
      input0.getMinTime();
      assertEquals("", input0.getDestination());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMaxTimeEntered());
      assertEquals((-331), input0.getDepartureDate());
      assertEquals(0.0, input0.getMaxPrice(), 0.01);
      assertTrue(input0.isMaxPriceEntered());
      assertFalse(input0.isMinTimeEntered());
      assertTrue(input0.isMinPriceEntered());
      assertEquals("/W^", input0.getOrigin());
      assertEquals(":", input0.getAirline());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Time time0 = new Time(6549, 10);
      Input input0 = new Input(":99?", ":99?", ":99?", (-4682.3), (-4682.3), true, true, 1320, time0, time0, true, true);
      double double0 = input0.getMinPrice();
      assertEquals((-4682.3), input0.getMaxPrice(), 0.01);
      assertEquals((-4682.3), double0, 0.01);
      assertTrue(input0.isMaxTimeEntered());
      assertTrue(input0.isMaxPriceEntered());
      assertTrue(input0.isMinTimeEntered());
      assertEquals(1320, input0.getDepartureDate());
      assertTrue(input0.isMinPriceEntered());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Time time0 = new Time(0, 0);
      Input input0 = new Input("%", "%", "%", 0.0, (-1098.22), true, true, 0, time0, time0, true, true);
      input0.getMaxTime();
      assertTrue(input0.isMaxPriceEntered());
      assertTrue(input0.isMaxTimeEntered());
      assertEquals(0, input0.getDepartureDate());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertTrue(input0.isMinPriceEntered());
      assertTrue(input0.isMinTimeEntered());
      assertEquals((-1098.22), input0.getMaxPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Time time0 = new Time(0, 1552);
      Input input0 = new Input("", "", "", 0.0, 0.0, false, false, (-1631), time0, time0, false, false);
      input0.getMaxTime();
      assertFalse(input0.isMaxTimeEntered());
      assertEquals(0.0, input0.getMaxPrice(), 0.01);
      assertFalse(input0.isMinPriceEntered());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals((-1631), input0.getDepartureDate());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMinTimeEntered());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Time time0 = new Time(6549, 10);
      Input input0 = new Input(":99?", ":99?", ":99?", (-4682.3), (-4682.3), true, true, 1320, time0, time0, true, true);
      input0.getMaxTime();
      assertTrue(input0.isMaxPriceEntered());
      assertTrue(input0.isMaxTimeEntered());
      assertTrue(input0.isMinPriceEntered());
      assertEquals((-4682.3), input0.getMinPrice(), 0.01);
      assertEquals(1320, input0.getDepartureDate());
      assertTrue(input0.isMinTimeEntered());
      assertEquals((-4682.3), input0.getMaxPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Time time0 = new Time();
      Time time1 = new Time((-624), (-2168));
      Input input0 = new Input("org.example.filter.Input", "org.example.filter.Input", "pTM52n}: SX_ffpd", 0.0, 0.0, true, true, (-624), time0, time1, true, false);
      Time time2 = input0.getMaxTime();
      assertEquals("org.example.filter.Input", input0.getAirline());
      assertEquals("pTM52n}: SX_ffpd", input0.getDestination());
      assertEquals("org.example.filter.Input", input0.getOrigin());
      assertTrue(input0.isMinPriceEntered());
      assertEquals((-624), input0.getDepartureDate());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertEquals((-2168), time2.getMin());
      assertTrue(input0.isMinTimeEntered());
      assertTrue(input0.isMaxPriceEntered());
      assertEquals(0.0, input0.getMaxPrice(), 0.01);
      assertFalse(input0.isMaxTimeEntered());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("", "@Qn9;yX4l*.(hI}^l", "", 0.0, 0.0, false, false, 0, time0, time0, true, false);
      double double0 = input0.getMaxPrice();
      assertEquals("@Qn9;yX4l*.(hI}^l", input0.getOrigin());
      assertFalse(input0.isMaxTimeEntered());
      assertFalse(input0.isMinPriceEntered());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertEquals("", input0.getAirline());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals("", input0.getDestination());
      assertTrue(input0.isMinTimeEntered());
      assertEquals(0, input0.getDepartureDate());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("u&/:F\"ydc4G3j[<{%yQ", "u&/:F\"ydc4G3j[<{%yQ", "SiD^O=_r<Iry+^g'$>", 0.0, 0.0, false, true, 1135, time0, time0, true, false);
      input0.setMaxPrice((-1988.4777231101339));
      double double0 = input0.getMaxPrice();
      assertEquals((-1988.4777231101339), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      assertEquals("u43w@", input0.getDestination());
      
      input0.setDestination((String) null);
      input0.getDestination();
      assertFalse(input0.isMaxTimeEntered());
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
      assertFalse(input0.isMaxPriceEntered());
      assertFalse(input0.isMinPriceEntered());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMinTimeEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertEquals((-84), input0.getDepartureDate());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Time time0 = new Time(0, 1552);
      Input input0 = new Input("", "", "", 0.0, 0.0, false, false, (-1631), time0, time0, false, false);
      input0.getDestination();
      assertFalse(input0.isMaxPriceEntered());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMinPriceEntered());
      assertFalse(input0.isMinTimeEntered());
      assertEquals(0.0, input0.getMaxPrice(), 0.01);
      assertFalse(input0.isMaxTimeEntered());
      assertEquals((-1631), input0.getDepartureDate());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Time time0 = new Time(0, 0);
      Input input0 = new Input("", "org.example.filter.Input", "org.example.filter.Input", 28.411752, 28.411752, true, true, 0, time0, time0, true, true);
      int int0 = input0.getDepartureDate();
      assertEquals("org.example.filter.Input", input0.getDestination());
      assertEquals(0, int0);
      assertTrue(input0.isMinPriceEntered());
      assertTrue(input0.isMinTimeEntered());
      assertEquals("org.example.filter.Input", input0.getOrigin());
      assertEquals("", input0.getAirline());
      assertTrue(input0.isMaxPriceEntered());
      assertEquals(28.411752, input0.getMaxPrice(), 0.01);
      assertEquals(28.411752, input0.getMinPrice(), 0.01);
      assertTrue(input0.isMaxTimeEntered());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Time time0 = new Time(1474, 1474);
      Input input0 = new Input("Zp%K4|s", "Zp%K4|s", "Zp%K4|s", (-722.0), (-722.0), false, false, 1474, time0, time0, false, true);
      int int0 = input0.getDepartureDate();
      assertEquals((-722.0), input0.getMaxPrice(), 0.01);
      assertEquals((-722.0), input0.getMinPrice(), 0.01);
      assertFalse(input0.isMinPriceEntered());
      assertEquals(1474, int0);
      assertTrue(input0.isMaxTimeEntered());
      assertFalse(input0.isMinTimeEntered());
      assertFalse(input0.isMaxPriceEntered());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Input input0 = new Input("", "", "/+", 1.0, (-1182.881633), true, true, (-2371), (Time) null, (Time) null, false, false);
      String string0 = input0.getAirline();
      assertTrue(input0.isMinPriceEntered());
      assertEquals(1.0, input0.getMinPrice(), 0.01);
      assertTrue(input0.isMaxPriceEntered());
      assertEquals("", string0);
      assertFalse(input0.isMinTimeEntered());
      assertEquals((-2371), input0.getDepartureDate());
      assertEquals("/+", input0.getDestination());
      assertFalse(input0.isMaxTimeEntered());
      assertEquals((-1182.881633), input0.getMaxPrice(), 0.01);
      assertEquals("", input0.getOrigin());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      input0.setMaxPriceEntered(false);
      assertFalse(input0.isMinTimeEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertEquals("u43w@", input0.getDestination());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMinPriceEntered());
      assertFalse(input0.isMaxTimeEntered());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals((-84), input0.getDepartureDate());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      int int0 = input0.getDepartureDate();
      assertEquals((-84), int0);
      assertFalse(input0.isMaxPriceEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
      assertEquals("u43w@", input0.getDestination());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMinPriceEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertFalse(input0.isMinTimeEntered());
      assertFalse(input0.isMaxTimeEntered());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      boolean boolean0 = input0.isMaxTimeEntered();
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertFalse(input0.isMinTimeEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
      assertFalse(input0.isMaxPriceEntered());
      assertFalse(input0.isMinPriceEntered());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
      assertFalse(boolean0);
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
      assertEquals("u43w@", input0.getDestination());
      assertEquals((-84), input0.getDepartureDate());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      input0.getMinTime();
      assertFalse(input0.isMinTimeEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertEquals("u43w@", input0.getDestination());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMinPriceEntered());
      assertFalse(input0.isMaxTimeEntered());
      assertEquals((-84), input0.getDepartureDate());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Input input0 = new Input("", (String) null, (String) null, (-173.9), 1.0, true, true, (-2581), (Time) null, (Time) null, false, false);
      boolean boolean0 = input0.isMinTimeEntered();
      assertEquals(1.0, input0.getMaxPrice(), 0.01);
      assertFalse(input0.isMaxTimeEntered());
      assertFalse(boolean0);
      assertTrue(input0.isMaxPriceEntered());
      assertEquals((-173.9), input0.getMinPrice(), 0.01);
      assertTrue(input0.isMinPriceEntered());
      assertEquals((-2581), input0.getDepartureDate());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Input input0 = new Input("x=4zW8", "4F:", "4F:", 0.0, 0.0, true, false, 3554, (Time) null, (Time) null, false, false);
      input0.getMaxTime();
      assertFalse(input0.isMinTimeEntered());
      assertEquals(0.0, input0.getMaxPrice(), 0.01);
      assertTrue(input0.isMinPriceEntered());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals(3554, input0.getDepartureDate());
      assertEquals("4F:", input0.getDestination());
      assertEquals("4F:", input0.getOrigin());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMaxTimeEntered());
      assertEquals("x=4zW8", input0.getAirline());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      double double0 = input0.getMaxPrice();
      assertEquals((-84), input0.getDepartureDate());
      assertFalse(input0.isMinPriceEntered());
      assertFalse(input0.isMaxTimeEntered());
      assertFalse(input0.isMinTimeEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
      assertEquals(2748.0, double0, 0.01);
      assertEquals("u43w@", input0.getDestination());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Input input0 = new Input("x=4zW8", "4F:", "4F:", 0.0, 0.0, true, false, 3554, (Time) null, (Time) null, false, false);
      input0.setDepartureDate((-306));
      assertEquals((-306), input0.getDepartureDate());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      String string0 = input0.getOrigin();
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
      assertFalse(input0.isMaxTimeEntered());
      assertEquals("DvUT~h7[Cl@Y1F", string0);
      assertEquals((-84), input0.getDepartureDate());
      assertFalse(input0.isMaxPriceEntered());
      assertFalse(input0.isMinTimeEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertEquals("u43w@", input0.getDestination());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
      assertFalse(input0.isMinPriceEntered());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Input input0 = new Input("x=4zW8", "4F:", "4F:", 0.0, 0.0, true, false, 3554, (Time) null, (Time) null, false, false);
      assertFalse(input0.isMinTimeEntered());
      
      input0.setMinTimeEntered(true);
      assertTrue(input0.isMinTimeEntered());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Input input0 = new Input("x=4zW8", "4F:", "4F:", 0.0, 0.0, true, false, 3554, (Time) null, (Time) null, false, false);
      boolean boolean0 = input0.isMinPriceEntered();
      assertEquals(3554, input0.getDepartureDate());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals("x=4zW8", input0.getAirline());
      assertTrue(boolean0);
      assertEquals("4F:", input0.getDestination());
      assertFalse(input0.isMaxTimeEntered());
      assertEquals(0.0, input0.getMaxPrice(), 0.01);
      assertEquals("4F:", input0.getOrigin());
      assertFalse(input0.isMinTimeEntered());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Input input0 = new Input("x=4zW8", "4F:", "4F:", 0.0, 0.0, true, false, 3554, (Time) null, (Time) null, false, false);
      String string0 = input0.getAirline();
      assertFalse(input0.isMaxTimeEntered());
      assertEquals("4F:", input0.getOrigin());
      assertEquals("4F:", input0.getDestination());
      assertEquals(0.0, input0.getMaxPrice(), 0.01);
      assertEquals(3554, input0.getDepartureDate());
      assertEquals("x=4zW8", string0);
      assertFalse(input0.isMaxPriceEntered());
      assertTrue(input0.isMinPriceEntered());
      assertFalse(input0.isMinTimeEntered());
      assertEquals(0.0, input0.getMinPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      double double0 = input0.getMinPrice();
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertFalse(input0.isMinTimeEntered());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals((-84), input0.getDepartureDate());
      assertFalse(input0.isMaxTimeEntered());
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
      assertEquals(2748.0, double0, 0.01);
      assertFalse(input0.isMinPriceEntered());
      assertEquals("u43w@", input0.getDestination());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("org.example.filter.Input", "org.example.filter.Input", "pTM52n}: SX_ffpd", 0.0, 0.0, true, true, (-624), time0, time0, true, false);
      assertFalse(input0.isMaxTimeEntered());
      
      input0.setMaxTimeEntered(true);
      assertTrue(input0.isMaxTimeEntered());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      String string0 = input0.getDestination();
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
      assertEquals((-84), input0.getDepartureDate());
      assertFalse(input0.isMinTimeEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertFalse(input0.isMaxPriceEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
      assertFalse(input0.isMaxTimeEntered());
      assertEquals("u43w@", string0);
      assertFalse(input0.isMinPriceEntered());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      input0.setMinTime(time0);
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
      assertFalse(input0.isMaxTimeEntered());
      assertEquals((-84), input0.getDepartureDate());
      assertFalse(input0.isMaxPriceEntered());
      assertFalse(input0.isMinTimeEntered());
      assertFalse(input0.isMinPriceEntered());
      assertEquals("u43w@", input0.getDestination());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      input0.setMaxTime(time0);
      assertFalse(input0.isMaxPriceEntered());
      assertFalse(input0.isMaxTimeEntered());
      assertFalse(input0.isMinTimeEntered());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
      assertEquals((-84), input0.getDepartureDate());
      assertFalse(input0.isMinPriceEntered());
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertEquals("u43w@", input0.getDestination());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Time time0 = new Time(0, 0);
      Input input0 = new Input("", "org.example.filter.Input", "org.example.filter.Input", 28.411752, 28.411752, true, true, 0, time0, time0, true, true);
      input0.setMinPriceEntered(true);
      assertTrue(input0.isMinPriceEntered());
      assertEquals("", input0.getAirline());
      assertTrue(input0.isMinTimeEntered());
      assertEquals(0, input0.getDepartureDate());
      assertEquals("org.example.filter.Input", input0.getOrigin());
      assertEquals("org.example.filter.Input", input0.getDestination());
      assertTrue(input0.isMaxTimeEntered());
      assertTrue(input0.isMaxPriceEntered());
      assertEquals(28.411752, input0.getMinPrice(), 0.01);
      assertEquals(28.411752, input0.getMaxPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      input0.setMinPrice(0.0);
      double double0 = input0.getMinPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Time time0 = new Time();
      Input input0 = new Input("DvUT~h7[Cl@Y1F", "DvUT~h7[Cl@Y1F", "u43w@", 2748.0, 2748.0, false, false, (-84), time0, time0, false, false);
      boolean boolean0 = input0.isMaxPriceEntered();
      assertEquals("DvUT~h7[Cl@Y1F", input0.getOrigin());
      assertFalse(input0.isMaxTimeEntered());
      assertEquals((-84), input0.getDepartureDate());
      assertFalse(input0.isMinPriceEntered());
      assertEquals(2748.0, input0.getMinPrice(), 0.01);
      assertFalse(boolean0);
      assertFalse(input0.isMinTimeEntered());
      assertEquals("DvUT~h7[Cl@Y1F", input0.getAirline());
      assertEquals(2748.0, input0.getMaxPrice(), 0.01);
      assertEquals("u43w@", input0.getDestination());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Input input0 = new Input("", (String) null, (String) null, (-173.9), 1.0, true, true, (-2581), (Time) null, (Time) null, false, false);
      input0.setAirline((String) null);
      input0.getAirline();
      assertFalse(input0.isMinTimeEntered());
      assertEquals((-2581), input0.getDepartureDate());
      assertEquals((-173.9), input0.getMinPrice(), 0.01);
      assertTrue(input0.isMaxPriceEntered());
      assertEquals(1.0, input0.getMaxPrice(), 0.01);
      assertFalse(input0.isMaxTimeEntered());
      assertTrue(input0.isMinPriceEntered());
  }
}
